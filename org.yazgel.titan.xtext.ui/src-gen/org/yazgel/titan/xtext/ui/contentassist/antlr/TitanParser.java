/*
* generated by Xtext
*/
package org.yazgel.titan.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.yazgel.titan.xtext.services.TitanGrammarAccess;

public class TitanParser extends AbstractContentAssistParser {
	
	@Inject
	private TitanGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.yazgel.titan.xtext.ui.contentassist.antlr.internal.InternalTitanParser createParser() {
		org.yazgel.titan.xtext.ui.contentassist.antlr.internal.InternalTitanParser result = new org.yazgel.titan.xtext.ui.contentassist.antlr.internal.InternalTitanParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getReferenceAccess().getAlternatives(), "rule__Reference__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getDataTypesAccess().getAlternatives(), "rule__DataTypes__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_4(), "rule__Module__Group_4__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getPackageAccess().getGroup_4(), "rule__Package__Group_4__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_3(), "rule__Entity__Group_3__0");
					put(grammarAccess.getEntityAccess().getGroup_5(), "rule__Entity__Group_5__0");
					put(grammarAccess.getSingleReferenceAccess().getGroup(), "rule__SingleReference__Group__0");
					put(grammarAccess.getSingleReferenceAccess().getGroup_5(), "rule__SingleReference__Group_5__0");
					put(grammarAccess.getMultiReferenceAccess().getGroup(), "rule__MultiReference__Group__0");
					put(grammarAccess.getMultiReferenceAccess().getGroup_6(), "rule__MultiReference__Group_6__0");
					put(grammarAccess.getSingleDataTypeAccess().getGroup(), "rule__SingleDataType__Group__0");
					put(grammarAccess.getSingleDataTypeAccess().getGroup_4(), "rule__SingleDataType__Group_4__0");
					put(grammarAccess.getMultiDataTypeAccess().getGroup(), "rule__MultiDataType__Group__0");
					put(grammarAccess.getMultiDataTypeAccess().getGroup_6(), "rule__MultiDataType__Group_6__0");
					put(grammarAccess.getQUALIFIED_NAMEAccess().getGroup(), "rule__QUALIFIED_NAME__Group__0");
					put(grammarAccess.getQUALIFIED_NAMEAccess().getGroup_1(), "rule__QUALIFIED_NAME__Group_1__0");
					put(grammarAccess.getModuleAccess().getNameAssignment_2(), "rule__Module__NameAssignment_2");
					put(grammarAccess.getModuleAccess().getTypeAssignment_3(), "rule__Module__TypeAssignment_3");
					put(grammarAccess.getModuleAccess().getPackagesAssignment_4_0(), "rule__Module__PackagesAssignment_4_0");
					put(grammarAccess.getModuleAccess().getPackagesAssignment_4_1(), "rule__Module__PackagesAssignment_4_1");
					put(grammarAccess.getPackageAccess().getNameAssignment_2(), "rule__Package__NameAssignment_2");
					put(grammarAccess.getPackageAccess().getEntitiesAssignment_4_0(), "rule__Package__EntitiesAssignment_4_0");
					put(grammarAccess.getPackageAccess().getEntitiesAssignment_4_1(), "rule__Package__EntitiesAssignment_4_1");
					put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
					put(grammarAccess.getEntityAccess().getSuperEntityAssignment_3_1(), "rule__Entity__SuperEntityAssignment_3_1");
					put(grammarAccess.getEntityAccess().getFeaturesAssignment_5_0(), "rule__Entity__FeaturesAssignment_5_0");
					put(grammarAccess.getEntityAccess().getFeaturesAssignment_5_1(), "rule__Entity__FeaturesAssignment_5_1");
					put(grammarAccess.getSingleReferenceAccess().getNameAssignment_2(), "rule__SingleReference__NameAssignment_2");
					put(grammarAccess.getSingleReferenceAccess().getReferenceAssignment_3(), "rule__SingleReference__ReferenceAssignment_3");
					put(grammarAccess.getSingleReferenceAccess().getUniqueAssignment_4(), "rule__SingleReference__UniqueAssignment_4");
					put(grammarAccess.getSingleReferenceAccess().getOppositeAssignment_5_1(), "rule__SingleReference__OppositeAssignment_5_1");
					put(grammarAccess.getMultiReferenceAccess().getNameAssignment_2(), "rule__MultiReference__NameAssignment_2");
					put(grammarAccess.getMultiReferenceAccess().getReferenceAssignment_3(), "rule__MultiReference__ReferenceAssignment_3");
					put(grammarAccess.getMultiReferenceAccess().getUniqueAssignment_5(), "rule__MultiReference__UniqueAssignment_5");
					put(grammarAccess.getMultiReferenceAccess().getOppositeAssignment_6_1(), "rule__MultiReference__OppositeAssignment_6_1");
					put(grammarAccess.getSingleDataTypeAccess().getNameAssignment_2(), "rule__SingleDataType__NameAssignment_2");
					put(grammarAccess.getSingleDataTypeAccess().getTypeAssignment_3(), "rule__SingleDataType__TypeAssignment_3");
					put(grammarAccess.getSingleDataTypeAccess().getOppositeAssignment_4_1(), "rule__SingleDataType__OppositeAssignment_4_1");
					put(grammarAccess.getMultiDataTypeAccess().getNameAssignment_2(), "rule__MultiDataType__NameAssignment_2");
					put(grammarAccess.getMultiDataTypeAccess().getTypeAssignment_3(), "rule__MultiDataType__TypeAssignment_3");
					put(grammarAccess.getMultiDataTypeAccess().getUniqueAssignment_5(), "rule__MultiDataType__UniqueAssignment_5");
					put(grammarAccess.getMultiDataTypeAccess().getOppositeAssignment_6_1(), "rule__MultiDataType__OppositeAssignment_6_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.yazgel.titan.xtext.ui.contentassist.antlr.internal.InternalTitanParser typedParser = (org.yazgel.titan.xtext.ui.contentassist.antlr.internal.InternalTitanParser) parser;
			typedParser.entryRuleModule();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TitanGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TitanGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
