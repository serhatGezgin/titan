grammar org.yazgel.titan.xtext.Titan with org.eclipse.xtext.common.Terminals

generate titan "http://www.yazgel.org/titan/xtext/Titan"

Module returns Module:
	{Module}
	'module'
	name=QUALIFIED_NAME
	type=InternalDSLType
	(packages+=Package (packages+=Package)*)?;

enum InternalDSLType returns InternalDSLType:
	NestedFunctions='Nested Functions';

Package returns Package:
	{Package}
	'package'
	name=QUALIFIED_NAME
	'{'
	(entities+=Entity (entities+=Entity)*)?
	'}';

Entity returns Entity:
	{Entity}
	'entity'
	name=ID (':' superEntity=[Entity|ID])?
	'{'
	(features+=Feature (features+=Feature)*)?
	'}';

Feature returns Feature:
	Reference | DataType;

Reference returns Reference:
	SingleReference | MultiReference;
	
SingleReference returns SingleReference:
	{SingleReference}
	'var'
	name=ID
	reference=[Entity|ID]
	unique ?= ('unique')?
	('opposite' opposite=[MultiReference|QUALIFIED_NAME])?;
	
MultiReference returns MultiReference:
	{MultiReference}
	'var'
	name=ID
	reference=[Entity|ID]
	'[]'
	unique ?= ('unique')?;
	
DataType returns DataType:
	SingleDataType | MultiDataType;
	
SingleDataType returns SingleDataType:
	{SingleDataType}
	'var'
	name=ID
	type=DataTypes
	('opposite' opposite=[MultiDataType|QUALIFIED_NAME])?;
	
MultiDataType returns MultiDataType:
	{MultiDataType}
	'var'
	name=ID
	type=DataTypes
	'[]'
	unique ?= ('unique')?;

enum DataTypes returns DataTypes:
	String='String' | Integer='integer' | Boolean='boolean' | Long='long' | Double='double';

QUALIFIED_NAME:
	ID ('.' ID)*;
