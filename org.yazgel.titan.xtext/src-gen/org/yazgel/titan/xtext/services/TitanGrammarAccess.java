/*
* generated by Xtext
*/
package org.yazgel.titan.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TitanGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQUALIFIED_NAMEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeInternalDSLTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPackagesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPackagesPackageParserRuleCall_4_0_0 = (RuleCall)cPackagesAssignment_4_0.eContents().get(0);
		private final Assignment cPackagesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPackagesPackageParserRuleCall_4_1_0 = (RuleCall)cPackagesAssignment_4_1.eContents().get(0);
		
		//Module:
		//	{Module} "module" name=QUALIFIED_NAME type=InternalDSLType (packages+=Package packages+=Package*)?;
		public ParserRule getRule() { return rule; }

		//{Module} "module" name=QUALIFIED_NAME type=InternalDSLType (packages+=Package packages+=Package*)?
		public Group getGroup() { return cGroup; }

		//{Module}
		public Action getModuleAction_0() { return cModuleAction_0; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//name=QUALIFIED_NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QUALIFIED_NAME
		public RuleCall getNameQUALIFIED_NAMEParserRuleCall_2_0() { return cNameQUALIFIED_NAMEParserRuleCall_2_0; }

		//type=InternalDSLType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//InternalDSLType
		public RuleCall getTypeInternalDSLTypeEnumRuleCall_3_0() { return cTypeInternalDSLTypeEnumRuleCall_3_0; }

		//(packages+=Package packages+=Package*)?
		public Group getGroup_4() { return cGroup_4; }

		//packages+=Package
		public Assignment getPackagesAssignment_4_0() { return cPackagesAssignment_4_0; }

		//Package
		public RuleCall getPackagesPackageParserRuleCall_4_0_0() { return cPackagesPackageParserRuleCall_4_0_0; }

		//packages+=Package*
		public Assignment getPackagesAssignment_4_1() { return cPackagesAssignment_4_1; }

		//Package
		public RuleCall getPackagesPackageParserRuleCall_4_1_0() { return cPackagesPackageParserRuleCall_4_1_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQUALIFIED_NAMEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEntitiesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0_0 = (RuleCall)cEntitiesAssignment_4_0.eContents().get(0);
		private final Assignment cEntitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_4_1_0 = (RuleCall)cEntitiesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cEntityBuildersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cEntityBuildersEntityBuilderParserRuleCall_5_0_0 = (RuleCall)cEntityBuildersAssignment_5_0.eContents().get(0);
		private final Assignment cEntityBuildersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEntityBuildersEntityBuilderParserRuleCall_5_1_0 = (RuleCall)cEntityBuildersAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Package:
		//	{Package} "package" name=QUALIFIED_NAME "{" (entities+=Entity entities+=Entity*)? (entityBuilders+=EntityBuilder
		//	entityBuilders+=EntityBuilder*)? "}";
		public ParserRule getRule() { return rule; }

		//{Package} "package" name=QUALIFIED_NAME "{" (entities+=Entity entities+=Entity*)? (entityBuilders+=EntityBuilder
		//entityBuilders+=EntityBuilder*)? "}"
		public Group getGroup() { return cGroup; }

		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=QUALIFIED_NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QUALIFIED_NAME
		public RuleCall getNameQUALIFIED_NAMEParserRuleCall_2_0() { return cNameQUALIFIED_NAMEParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(entities+=Entity entities+=Entity*)?
		public Group getGroup_4() { return cGroup_4; }

		//entities+=Entity
		public Assignment getEntitiesAssignment_4_0() { return cEntitiesAssignment_4_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0_0() { return cEntitiesEntityParserRuleCall_4_0_0; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_4_1() { return cEntitiesAssignment_4_1; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_1_0() { return cEntitiesEntityParserRuleCall_4_1_0; }

		//(entityBuilders+=EntityBuilder entityBuilders+=EntityBuilder*)?
		public Group getGroup_5() { return cGroup_5; }

		//entityBuilders+=EntityBuilder
		public Assignment getEntityBuildersAssignment_5_0() { return cEntityBuildersAssignment_5_0; }

		//EntityBuilder
		public RuleCall getEntityBuildersEntityBuilderParserRuleCall_5_0_0() { return cEntityBuildersEntityBuilderParserRuleCall_5_0_0; }

		//entityBuilders+=EntityBuilder*
		public Assignment getEntityBuildersAssignment_5_1() { return cEntityBuildersAssignment_5_1; }

		//EntityBuilder
		public RuleCall getEntityBuildersEntityBuilderParserRuleCall_5_1_0() { return cEntityBuildersEntityBuilderParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperEntityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperEntityEntityCrossReference_3_1_0 = (CrossReference)cSuperEntityAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperEntityEntityIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperEntityEntityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cFeaturesFeatureParserRuleCall_5_0_0 = (RuleCall)cFeaturesAssignment_5_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_5_1_0 = (RuleCall)cFeaturesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity:
		//	{Entity} "entity" name=ID (":" superEntity=[Entity])? "{" (features+=Feature features+=Feature*)? "}";
		public ParserRule getRule() { return rule; }

		//{Entity} "entity" name=ID (":" superEntity=[Entity])? "{" (features+=Feature features+=Feature*)? "}"
		public Group getGroup() { return cGroup; }

		//{Entity}
		public Action getEntityAction_0() { return cEntityAction_0; }

		//"entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" superEntity=[Entity])?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//superEntity=[Entity]
		public Assignment getSuperEntityAssignment_3_1() { return cSuperEntityAssignment_3_1; }

		//[Entity]
		public CrossReference getSuperEntityEntityCrossReference_3_1_0() { return cSuperEntityEntityCrossReference_3_1_0; }

		//ID
		public RuleCall getSuperEntityEntityIDTerminalRuleCall_3_1_0_1() { return cSuperEntityEntityIDTerminalRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(features+=Feature features+=Feature*)?
		public Group getGroup_5() { return cGroup_5; }

		//features+=Feature
		public Assignment getFeaturesAssignment_5_0() { return cFeaturesAssignment_5_0; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_5_0_0() { return cFeaturesFeatureParserRuleCall_5_0_0; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_5_1() { return cFeaturesAssignment_5_1; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_5_1_0() { return cFeaturesFeatureParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EntityBuilderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityBuilder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityBuilderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityBuilderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameEntityCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cNameEntityCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTakesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTakesTakesParserRuleCall_4_0 = (RuleCall)cTakesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EntityBuilder:
		//	{EntityBuilder} "entityBuilder" name=[Entity] "{" takes=takes? "}";
		public ParserRule getRule() { return rule; }

		//{EntityBuilder} "entityBuilder" name=[Entity] "{" takes=takes? "}"
		public Group getGroup() { return cGroup; }

		//{EntityBuilder}
		public Action getEntityBuilderAction_0() { return cEntityBuilderAction_0; }

		//"entityBuilder"
		public Keyword getEntityBuilderKeyword_1() { return cEntityBuilderKeyword_1; }

		//name=[Entity]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[Entity]
		public CrossReference getNameEntityCrossReference_2_0() { return cNameEntityCrossReference_2_0; }

		//ID
		public RuleCall getNameEntityIDTerminalRuleCall_2_0_1() { return cNameEntityIDTerminalRuleCall_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//takes=takes?
		public Assignment getTakesAssignment_4() { return cTakesAssignment_4; }

		//takes
		public RuleCall getTakesTakesParserRuleCall_4_0() { return cTakesTakesParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "method");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeEntityCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_0_1 = (RuleCall)cTypeEntityCrossReference_0.eContents().get(1);
		
		//method:
		//	type=[Entity];
		public ParserRule getRule() { return rule; }

		//type=[Entity]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[Entity]
		public CrossReference getTypeEntityCrossReference_0() { return cTypeEntityCrossReference_0; }

		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_0_1() { return cTypeEntityIDTerminalRuleCall_0_1; }
	}

	public class TakesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "takes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTakesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTakesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTakesParameterFeatureParserRuleCall_1_0 = (RuleCall)cTakesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTakesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTakesParameterFeatureParserRuleCall_2_1_0 = (RuleCall)cTakesAssignment_2_1.eContents().get(0);
		private final Assignment cAddsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddsAddsParserRuleCall_3_0 = (RuleCall)cAddsAssignment_3.eContents().get(0);
		
		//takes:
		//	"takes" takes+=ParameterFeature ("," takes+=ParameterFeature)* adds+=adds?;
		public ParserRule getRule() { return rule; }

		//"takes" takes+=ParameterFeature ("," takes+=ParameterFeature)* adds+=adds?
		public Group getGroup() { return cGroup; }

		//"takes"
		public Keyword getTakesKeyword_0() { return cTakesKeyword_0; }

		//takes+=ParameterFeature
		public Assignment getTakesAssignment_1() { return cTakesAssignment_1; }

		//ParameterFeature
		public RuleCall getTakesParameterFeatureParserRuleCall_1_0() { return cTakesParameterFeatureParserRuleCall_1_0; }

		//("," takes+=ParameterFeature)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//takes+=ParameterFeature
		public Assignment getTakesAssignment_2_1() { return cTakesAssignment_2_1; }

		//ParameterFeature
		public RuleCall getTakesParameterFeatureParserRuleCall_2_1_0() { return cTakesParameterFeatureParserRuleCall_2_1_0; }

		//adds+=adds?
		public Assignment getAddsAssignment_3() { return cAddsAssignment_3; }

		//adds
		public RuleCall getAddsAddsParserRuleCall_3_0() { return cAddsAddsParserRuleCall_3_0; }
	}

	public class AddsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "adds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAddsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cAddsFeatureCrossReference_2_0_0 = (CrossReference)cAddsAssignment_2_0.eContents().get(0);
		private final RuleCall cAddsFeatureQUALIFIED_NAMEParserRuleCall_2_0_0_1 = (RuleCall)cAddsFeatureCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAddsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cAddsFeatureCrossReference_2_1_1_0 = (CrossReference)cAddsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cAddsFeatureQUALIFIED_NAMEParserRuleCall_2_1_1_0_1 = (RuleCall)cAddsFeatureCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//adds:
		//	"adds" "(" (adds+=[Feature|QUALIFIED_NAME] ("," adds+=[Feature|QUALIFIED_NAME])*) ")";
		public ParserRule getRule() { return rule; }

		//"adds" "(" (adds+=[Feature|QUALIFIED_NAME] ("," adds+=[Feature|QUALIFIED_NAME])*) ")"
		public Group getGroup() { return cGroup; }

		//"adds"
		public Keyword getAddsKeyword_0() { return cAddsKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//adds+=[Feature|QUALIFIED_NAME] ("," adds+=[Feature|QUALIFIED_NAME])*
		public Group getGroup_2() { return cGroup_2; }

		//adds+=[Feature|QUALIFIED_NAME]
		public Assignment getAddsAssignment_2_0() { return cAddsAssignment_2_0; }

		//[Feature|QUALIFIED_NAME]
		public CrossReference getAddsFeatureCrossReference_2_0_0() { return cAddsFeatureCrossReference_2_0_0; }

		//QUALIFIED_NAME
		public RuleCall getAddsFeatureQUALIFIED_NAMEParserRuleCall_2_0_0_1() { return cAddsFeatureQUALIFIED_NAMEParserRuleCall_2_0_0_1; }

		//("," adds+=[Feature|QUALIFIED_NAME])*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//adds+=[Feature|QUALIFIED_NAME]
		public Assignment getAddsAssignment_2_1_1() { return cAddsAssignment_2_1_1; }

		//[Feature|QUALIFIED_NAME]
		public CrossReference getAddsFeatureCrossReference_2_1_1_0() { return cAddsFeatureCrossReference_2_1_1_0; }

		//QUALIFIED_NAME
		public RuleCall getAddsFeatureQUALIFIED_NAMEParserRuleCall_2_1_1_0_1() { return cAddsFeatureQUALIFIED_NAMEParserRuleCall_2_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	Reference | DataType;
		public ParserRule getRule() { return rule; }

		//Reference | DataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//Reference
		public RuleCall getReferenceParserRuleCall_0() { return cReferenceParserRuleCall_0; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferenceEntityCrossReference_3_0 = (CrossReference)cReferenceAssignment_3.eContents().get(0);
		private final RuleCall cReferenceEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cReferenceEntityCrossReference_3_0.eContents().get(1);
		private final Assignment cManyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_4_0 = (Keyword)cManyAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOppositeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOppositeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cOppositeReferenceCrossReference_5_1_0 = (CrossReference)cOppositeAssignment_5_1.eContents().get(0);
		private final RuleCall cOppositeReferenceQUALIFIED_NAMEParserRuleCall_5_1_0_1 = (RuleCall)cOppositeReferenceCrossReference_5_1_0.eContents().get(1);
		
		//Reference:
		//	{Reference} "var" name=ID reference=[Entity] many?="[]"? ("opposite" opposite=[Reference|QUALIFIED_NAME])?;
		public ParserRule getRule() { return rule; }

		//{Reference} "var" name=ID reference=[Entity] many?="[]"? ("opposite" opposite=[Reference|QUALIFIED_NAME])?
		public Group getGroup() { return cGroup; }

		//{Reference}
		public Action getReferenceAction_0() { return cReferenceAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//reference=[Entity]
		public Assignment getReferenceAssignment_3() { return cReferenceAssignment_3; }

		//[Entity]
		public CrossReference getReferenceEntityCrossReference_3_0() { return cReferenceEntityCrossReference_3_0; }

		//ID
		public RuleCall getReferenceEntityIDTerminalRuleCall_3_0_1() { return cReferenceEntityIDTerminalRuleCall_3_0_1; }

		//many?="[]"?
		public Assignment getManyAssignment_4() { return cManyAssignment_4; }

		//"[]"
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_4_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_4_0; }

		//("opposite" opposite=[Reference|QUALIFIED_NAME])?
		public Group getGroup_5() { return cGroup_5; }

		//"opposite"
		public Keyword getOppositeKeyword_5_0() { return cOppositeKeyword_5_0; }

		//opposite=[Reference|QUALIFIED_NAME]
		public Assignment getOppositeAssignment_5_1() { return cOppositeAssignment_5_1; }

		//[Reference|QUALIFIED_NAME]
		public CrossReference getOppositeReferenceCrossReference_5_1_0() { return cOppositeReferenceCrossReference_5_1_0; }

		//QUALIFIED_NAME
		public RuleCall getOppositeReferenceQUALIFIED_NAMEParserRuleCall_5_1_0_1() { return cOppositeReferenceQUALIFIED_NAMEParserRuleCall_5_1_0_1; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypesEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cManyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_4_0 = (Keyword)cManyAssignment_4.eContents().get(0);
		
		//DataType:
		//	{DataType} "var" name=ID type=DataTypes many?="[]"?;
		public ParserRule getRule() { return rule; }

		//{DataType} "var" name=ID type=DataTypes many?="[]"?
		public Group getGroup() { return cGroup; }

		//{DataType}
		public Action getDataTypeAction_0() { return cDataTypeAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//type=DataTypes
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//DataTypes
		public RuleCall getTypeDataTypesEnumRuleCall_3_0() { return cTypeDataTypesEnumRuleCall_3_0; }

		//many?="[]"?
		public Assignment getManyAssignment_4() { return cManyAssignment_4; }

		//"[]"
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_4_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_4_0; }
	}

	public class ParameterFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterFeature:
		//	ParameterReference | ParameterDataType;
		public ParserRule getRule() { return rule; }

		//ParameterReference | ParameterDataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParameterReference
		public RuleCall getParameterReferenceParserRuleCall_0() { return cParameterReferenceParserRuleCall_0; }

		//ParameterDataType
		public RuleCall getParameterDataTypeParserRuleCall_1() { return cParameterDataTypeParserRuleCall_1; }
	}

	public class ParameterReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceEntityCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cManyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cManyAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//ParameterReference:
		//	{ParameterReference} reference=[Entity] many?="[]"? name=ID;
		public ParserRule getRule() { return rule; }

		//{ParameterReference} reference=[Entity] many?="[]"? name=ID
		public Group getGroup() { return cGroup; }

		//{ParameterReference}
		public Action getParameterReferenceAction_0() { return cParameterReferenceAction_0; }

		//reference=[Entity]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Entity]
		public CrossReference getReferenceEntityCrossReference_1_0() { return cReferenceEntityCrossReference_1_0; }

		//ID
		public RuleCall getReferenceEntityIDTerminalRuleCall_1_0_1() { return cReferenceEntityIDTerminalRuleCall_1_0_1; }

		//many?="[]"?
		public Assignment getManyAssignment_2() { return cManyAssignment_2; }

		//"[]"
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_2_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class ParameterDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypesEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cManyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cManyAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//ParameterDataType:
		//	{ParameterDataType} type=DataTypes many?="[]"? name=ID;
		public ParserRule getRule() { return rule; }

		//{ParameterDataType} type=DataTypes many?="[]"? name=ID
		public Group getGroup() { return cGroup; }

		//{ParameterDataType}
		public Action getParameterDataTypeAction_0() { return cParameterDataTypeAction_0; }

		//type=DataTypes
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DataTypes
		public RuleCall getTypeDataTypesEnumRuleCall_1_0() { return cTypeDataTypesEnumRuleCall_1_0; }

		//many?="[]"?
		public Assignment getManyAssignment_2() { return cManyAssignment_2; }

		//"[]"
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_2_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class QUALIFIED_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QUALIFIED_NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QUALIFIED_NAME:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class InternalDSLTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InternalDSLType");
		private final EnumLiteralDeclaration cNestedFunctionsEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNestedFunctionsNestedFunctionsKeyword_0 = (Keyword)cNestedFunctionsEnumLiteralDeclaration.eContents().get(0);
		
		//enum InternalDSLType:
		//	NestedFunctions="Nested Functions";
		public EnumRule getRule() { return rule; }

		//NestedFunctions="Nested Functions"
		public EnumLiteralDeclaration getNestedFunctionsEnumLiteralDeclaration() { return cNestedFunctionsEnumLiteralDeclaration; }

		//"Nested Functions"
		public Keyword getNestedFunctionsNestedFunctionsKeyword_0() { return cNestedFunctionsNestedFunctionsKeyword_0; }
	}

	public class DataTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLongLongKeyword_3_0 = (Keyword)cLongEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDoubleDoubleKeyword_4_0 = (Keyword)cDoubleEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cObjectEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cObjectObjectKeyword_5_0 = (Keyword)cObjectEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum DataTypes:
		//	String | Integer="integer" | Boolean="boolean" | Long="long" | Double="double" | Object;
		public EnumRule getRule() { return rule; }

		//String | Integer="integer" | Boolean="boolean" | Long="long" | Double="double" | Object
		public Alternatives getAlternatives() { return cAlternatives; }

		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }

		//"String"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }

		//Integer="integer"
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//Boolean="boolean"
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }

		//Long="long"
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_3() { return cLongEnumLiteralDeclaration_3; }

		//"long"
		public Keyword getLongLongKeyword_3_0() { return cLongLongKeyword_3_0; }

		//Double="double"
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_4() { return cDoubleEnumLiteralDeclaration_4; }

		//"double"
		public Keyword getDoubleDoubleKeyword_4_0() { return cDoubleDoubleKeyword_4_0; }

		//Object
		public EnumLiteralDeclaration getObjectEnumLiteralDeclaration_5() { return cObjectEnumLiteralDeclaration_5; }

		//"Object"
		public Keyword getObjectObjectKeyword_5_0() { return cObjectObjectKeyword_5_0; }
	}
	
	private final ModuleElements pModule;
	private final InternalDSLTypeElements unknownRuleInternalDSLType;
	private final PackageElements pPackage;
	private final EntityElements pEntity;
	private final EntityBuilderElements pEntityBuilder;
	private final MethodElements pMethod;
	private final TakesElements pTakes;
	private final AddsElements pAdds;
	private final FeatureElements pFeature;
	private final ReferenceElements pReference;
	private final DataTypeElements pDataType;
	private final ParameterFeatureElements pParameterFeature;
	private final ParameterReferenceElements pParameterReference;
	private final ParameterDataTypeElements pParameterDataType;
	private final DataTypesElements unknownRuleDataTypes;
	private final QUALIFIED_NAMEElements pQUALIFIED_NAME;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TitanGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModule = new ModuleElements();
		this.unknownRuleInternalDSLType = new InternalDSLTypeElements();
		this.pPackage = new PackageElements();
		this.pEntity = new EntityElements();
		this.pEntityBuilder = new EntityBuilderElements();
		this.pMethod = new MethodElements();
		this.pTakes = new TakesElements();
		this.pAdds = new AddsElements();
		this.pFeature = new FeatureElements();
		this.pReference = new ReferenceElements();
		this.pDataType = new DataTypeElements();
		this.pParameterFeature = new ParameterFeatureElements();
		this.pParameterReference = new ParameterReferenceElements();
		this.pParameterDataType = new ParameterDataTypeElements();
		this.unknownRuleDataTypes = new DataTypesElements();
		this.pQUALIFIED_NAME = new QUALIFIED_NAMEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.yazgel.titan.xtext.Titan".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Module:
	//	{Module} "module" name=QUALIFIED_NAME type=InternalDSLType (packages+=Package packages+=Package*)?;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//enum InternalDSLType:
	//	NestedFunctions="Nested Functions";
	public InternalDSLTypeElements getInternalDSLTypeAccess() {
		return unknownRuleInternalDSLType;
	}
	
	public EnumRule getInternalDSLTypeRule() {
		return getInternalDSLTypeAccess().getRule();
	}

	//Package:
	//	{Package} "package" name=QUALIFIED_NAME "{" (entities+=Entity entities+=Entity*)? (entityBuilders+=EntityBuilder
	//	entityBuilders+=EntityBuilder*)? "}";
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Entity:
	//	{Entity} "entity" name=ID (":" superEntity=[Entity])? "{" (features+=Feature features+=Feature*)? "}";
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//EntityBuilder:
	//	{EntityBuilder} "entityBuilder" name=[Entity] "{" takes=takes? "}";
	public EntityBuilderElements getEntityBuilderAccess() {
		return pEntityBuilder;
	}
	
	public ParserRule getEntityBuilderRule() {
		return getEntityBuilderAccess().getRule();
	}

	//method:
	//	type=[Entity];
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//takes:
	//	"takes" takes+=ParameterFeature ("," takes+=ParameterFeature)* adds+=adds?;
	public TakesElements getTakesAccess() {
		return pTakes;
	}
	
	public ParserRule getTakesRule() {
		return getTakesAccess().getRule();
	}

	//adds:
	//	"adds" "(" (adds+=[Feature|QUALIFIED_NAME] ("," adds+=[Feature|QUALIFIED_NAME])*) ")";
	public AddsElements getAddsAccess() {
		return pAdds;
	}
	
	public ParserRule getAddsRule() {
		return getAddsAccess().getRule();
	}

	//Feature:
	//	Reference | DataType;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Reference:
	//	{Reference} "var" name=ID reference=[Entity] many?="[]"? ("opposite" opposite=[Reference|QUALIFIED_NAME])?;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//DataType:
	//	{DataType} "var" name=ID type=DataTypes many?="[]"?;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//ParameterFeature:
	//	ParameterReference | ParameterDataType;
	public ParameterFeatureElements getParameterFeatureAccess() {
		return pParameterFeature;
	}
	
	public ParserRule getParameterFeatureRule() {
		return getParameterFeatureAccess().getRule();
	}

	//ParameterReference:
	//	{ParameterReference} reference=[Entity] many?="[]"? name=ID;
	public ParameterReferenceElements getParameterReferenceAccess() {
		return pParameterReference;
	}
	
	public ParserRule getParameterReferenceRule() {
		return getParameterReferenceAccess().getRule();
	}

	//ParameterDataType:
	//	{ParameterDataType} type=DataTypes many?="[]"? name=ID;
	public ParameterDataTypeElements getParameterDataTypeAccess() {
		return pParameterDataType;
	}
	
	public ParserRule getParameterDataTypeRule() {
		return getParameterDataTypeAccess().getRule();
	}

	//enum DataTypes:
	//	String | Integer="integer" | Boolean="boolean" | Long="long" | Double="double" | Object;
	public DataTypesElements getDataTypesAccess() {
		return unknownRuleDataTypes;
	}
	
	public EnumRule getDataTypesRule() {
		return getDataTypesAccess().getRule();
	}

	//QUALIFIED_NAME:
	//	ID ("." ID)*;
	public QUALIFIED_NAMEElements getQUALIFIED_NAMEAccess() {
		return pQUALIFIED_NAME;
	}
	
	public ParserRule getQUALIFIED_NAMERule() {
		return getQUALIFIED_NAMEAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
